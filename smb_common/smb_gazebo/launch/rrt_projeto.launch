<?xml version="1.0" encoding="utf-8"?>
<launch>
<!-- GAZEBO ARGUMENTS -->
<!-- Run Gazebo headless -->
<arg name="headless" default="false"/>
<!-- Model path -->
<arg name="model_path" default="$(find smb_gazebo)/"/>
<arg name="robot_namespace" default=""/>
<arg name="robot_model_name" default="smb"/>
<arg name="enable_ekf" default="true"/>

<!-- Name of the world -->
<arg name="world"                                 default="testWorld"/>
<!-- Path to the world file -->
<!--
 <arg name="world_file"                            default="worlds/$(arg world).world"/> 
-->
<arg name="world_file"                            default="$(find smb_gazebo)/worlds/$(arg world).world"/>
<arg name="laser_enabled" default="true"/>
<arg name="map_file"       default="$(find smb_gazebo)/launch/mapa.yaml"/>
<!-- Set the initial pose of the robot's main body -->
<arg name="x" default="13.0"/>
<arg name="y" default="6.0"/>
<arg name="z" default="0.8"/>
<arg name="roll" default="0.0"/>
<arg name="pitch" default="0.0"/>
<arg name="yaw" default="0.0"/>
<!-- Start paused -->
<arg name="paused" default="false"/>
<!-- Use simulation clock -->
<arg name="use_sim_time" default="true"/>
<!-- Debug mode -->
<arg name="debug" default="false"/>
<!-- Verbose mode -->
<arg name="verbose" default="true"/>
<arg name="laser_scan_min_height" default="0.0"/>
<arg name="laser_scan_max_height" default="0.1"/>
<!-- GUI ARGUMENTS -->
<!-- Enable/disable Gazebo GUI -->
<arg name="run_gui" default="true"/>
<!-- ROBOT ARGUMENTS -->
<!-- Name of the robot description parameter -->
<arg name="robot_description" default="robot_description"/>
<!-- Mapping -->
<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
<param name="frame_id" value="map"/>
</node>

  <!-- Localization -->
  <node pkg="amcl" type="amcl" name="amcl" output="screen">
   <remap from="scan" to="rslidar_points"/>
    <param name="min_particles"             value="500"/>
    <param name="max_particles"             value="10000"/> <!--3000-->
    <param name="kld_err"                   value="0.1"/> <!--0.02-->
    <param name="resample_interval"         value="1"/>
    <param name="transform_tolerance"       value="0.01"/> <!--0.5-->
    <param name="recovery_alpha_slow"       value="0.00"/>
    <param name="recovery_alpha_fast"       value="0.00"/>
    <param name="initial_pose_x"            value="0"/>
    <param name="initial_pose_y"            value="0"/>
    <param name="initial_pose_a"            value="0.0"/>
    <param name="gui_publish_rate"          value="50.0"/>


    <param name="odom_model_type"           value="diff"/>
    <param name="odom_alpha1"               value="0.7"/>
    <param name="odom_alpha2"               value="0.7"/>
    <param name="odom_alpha3"               value="0.7"/>
    <param name="odom_alpha4"               value="0.7"/>
    <param name="odom_frame_id"             value="odom"/>
    <param name="base_frame_id"             value="base_link"/> <!--odom-->
    <param name="global_frame_id"           value="map"/>
    <param name="tf_broadcast"              value="true"/>
    <param name="update_min_d" value="0.1"/>
    <param name="update_min_a" value="0.1"/>

  </node>

<!-- <node pkg="tf" type="static_transform_publisher" name="odom_to_map" args="0 0 0.0 0 0 0 /odom /map 100"/> -->
<node pkg="tf" type="static_transform_publisher" name="odom_to_map" args="0 0 0.0 0 0 0 /odom /rslidar_lidar_link 100"/>
<!-- <node pkg="tf" type="static_transform_publisher" name="map_to_base_link" args="0 0 0 0 0 0 /map /base_link "/>
<node pkg="tf" type="static_transform_publisher" name="baseLink_to_rslidar" args="0 0 0 0 0 0 /lidar_mount_link /rslidar_base_link"/> -->

<!-- <node pkg="tf" type="static_transform_publisher" name="base_link_to_rslidar_base_link" args="0.0 0 0.0 0 0 0 /base_link /rslidar_base_link "/> -->
<!-- Localization -->
<!-- Convert 3D velodyne scan to laser scan -->
  <node name= "pointcloud_to_laserscan" pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" if="$(arg laser_enabled)">
        <remap from="cloud_in" to="/rslidar_points"/>
        <remap from="scan" to="/scan"/>
        <rosparam>
            target_frame: rslidar # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: $(arg laser_scan_min_height)
            max_height: $(arg laser_scan_max_height)

            angle_min: -1.5708 # -M_PI/2
            angle_max: 1.5708 # M_PI/2
            angle_increment: 0.0087 # M_PI/360.0
            scan_time: 0.03333
            range_min: 0.45
            range_max: 50.0
            use_inf: true
            inf_epsilon: 1.0

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>
  </node>

<!-- Move base -->
<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
<rosparam file="$(find smb_gazebo)/config/costmap_common_params.yaml" command="load" ns="global_costmap"/>
<rosparam file="$(find smb_gazebo)/config/costmap_common_params.yaml" command="load" ns="local_costmap"/>
<rosparam file="$(find smb_gazebo)/config/local_costmap_params.yaml" command="load"/>
<rosparam file="$(find smb_gazebo)/config/global_costmap_params.yaml" command="load"/>
<rosparam file="$(find smb_gazebo)/config/base_local_planner_params.yaml" command="load"/>
<remap from="cmd_vel" to="cmd_vel"/>
<remap from="odom" to="odom"/>
<remap from="scan" to="rslidar_points"/>
<param name="move_base/DWAPlannerROS/yaw_goal_tolerance" value="1.0"/>
<param name="move_base/DWAPlannerROS/xy_goal_tolerance" value="1.0"/>
</node>
<!-- Load Gazebo world -->
<include file="$(find gazebo_ros)/launch/empty_world.launch">
<env name="GAZEBO_MODEL_PATH" value="$(arg model_path)"/>
<arg name="world_name" value="$(arg world_file)"/>
<arg name="paused" value="$(arg paused)"/>
<arg name="use_sim_time" value="$(arg use_sim_time)"/>
<arg name="gui" value="$(arg run_gui)"/>
<arg name="headless" value="$(arg headless)"/>
<arg name="debug" value="$(arg debug)"/>
<arg name="verbose" value="$(arg verbose)"/>
</include>
<!-- Spawn robot in Gazebo -->
<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param $(arg robot_description) -urdf -model $(arg robot_model_name) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw)" output="screen"/>
<node pkg="robot_state_publisher" type="robot_state_publisher" name="rob_st_pub">
<remap from="robot_description" to="my_robot_description"/>
<remap from="joint_states" to="different_joint_states"/>
</node>
<include file="$(find smb_control)/launch/control.launch">
<arg name="simulation" default="true"/>
<arg name="robot_namespace" default="$(arg robot_namespace)"/>
<arg name="robot_description" default="$(arg robot_description)"/>
<arg name="enable_ekf" default="$(arg enable_ekf)"/>
</include>
<!-- rviz -->
<node type="rviz" name="rviz" pkg="rviz" required="true" args="-d $(find smb_gazebo)/rviz/smb_navigation.rviz"/>
</launch>
